import Distributions: cdf, Normal
using CSV, DataFrames


######################################################################
# Utility Functions
######################################################################

 # CRRA utility function
gamma = 1.5
beta = 0.96

function u(c, s)
    return ((c/s)^(1-gamma)) / (1-gamma)
end

function u_prime(c, s)
    return (c/s)^(-gamma)
end

function u_prime_inv(v,s)
    return v^(-1 / gamma) * s
end

# OECD scale
function oecd(m,n)
    # oecd equivalence scale (1 + 0.7(Adults - 1) + 0.5 kids)
    return (1 + 0.7(m) + 0.5(n-(m + 1)))
end


######################################################################
# Income and Taxes
######################################################################

tau_a = 0.2
co = 10800# consumption floor
cw = 10800
rate = 0.04

# deterministic component of income
function g(r,j,e,n)
    mid_age = (18.5 + 2*j)
    e_adjustments = Dict(
        (2, 0) => -0.857437303, (2, 2) => -0.669916495, (2, 4) => 0.0,
        (1, 0) => -0.427457616, (1, 2) => -0.191776015, (1, 4) => 0.0
    )

    if r == 2
        g = 8.683897019 + 0.136201881 *mid_age - 0.001395129*mid_age^2 - 0.000002581*mid_age^3 + 0.056068424*n + e_adjustments[(2,e)]
    else
        g = 8.436323967 +  0.189316327*mid_age - 0.003358923*(mid_age^2)  + 0.000018850*(mid_age^3) + 0.088107741*n +e_adjustments[(1,e)]

    end
    return exp(g)
end

function precomputed_income(r, j_grid, e_grid, z_grid, n_grid)
    
    y =  g(r,j,e,n) + z 
    gov_amount = gov_t(j,y,a, m, n)
    y_plus_g = y + gov_amount
    log_a_income  = log(rate * max(a, 1))
    transfer_in  =  tau_in * T_in(r,n,m,j,log(y_plus_g), log_a_income, past_in, past_out) 
    transfer_out = tau_out * T_out(r,n,m,j,log(y_plus_g), log_a_income, past_in, past_out)                
    monotonicity_requirement = a/Tcoefs[1,r] * (1 + rate*(1-tau_a) + transfer_in* Tcoefs[2,r] )
    if gov_amount > 0
        Y =  (1 + rate*(1-tau_a))a + y_plus_g - tau_y(y_plus_g, m) + transfer_in
    else
        Y =  (1 + rate*(1-tau_a))a + y_plus_g - tau_y(y_plus_g, m) + transfer_in - min(transfer_out, monotonicity_requirement)
    end
    Y = max(0.01,Y)

    return reshape(flat_results, length(j_grid), length(e_grid), length(n_grid))
end

# government transfer
function gov_t(j,y,a, m, n)
    # consumption floor scaled by family size
    s(m,n) = j < 5 ? oecd(m,n) : oecd(m,m+1)

    # j age/period, y income/pension, a asset, tau_y labor income tax
    if j <= 9 
        # transfer for worker
        gt = max(0, cw * s(m,n) - (y - tau_y(y,m) + (1 + rate*(1-tau_a))*a ))
    else
        # trasnfer for retiree
        gt = max(0, co * s(m,n) - (y + (1 + rate*(1-tau_a))*a ))
    end
    return gt 
end

function tau_y(y, m)
    div_y = y/2
    
    if m == 1
        lambda = 0.08
        tau_y = 0.115
    else 
        lambda = 0.07
        tau_y = 0.07
    end
    peryear = div_y - (1-lambda)*div_y^(1-tau_y)
    return peryear * 2
end

######################################################################
# Transfer Functions
######################################################################

function T_in(r,n,m,j,y, a_income,past_in, past_out)
    mid_age = 16.5 + 2*j

    coeffs = Dict(
        2 => ( 6.9589314893 , 0.0090112497 , 0.0183175377, -0.0157856109,  0.0001268678 , 0.0775109377 ,-0.0128858639 , 0.0067427955 , 0.0421225496),
        1 => (6.2359313233 ,0.0161060820,  0.0863142844 , 0.0519280756, -0.0006733001, -0.0494862248 , 0.3029817606,  0.1356739013 ,-0.0959002205)
    )

    b0, b1, b2, b3, b4, b5, b6, b7, b8 = coeffs[r]
    val = b0 + b1 *y + b2 * a_income + b3 * mid_age + b4 *mid_age^2 + b5 * n + b6 * m + b7 * past_in + b8 * past_out

    return exp(val)
end

# transfer out amount
function T_out(r,n,m,j,y, a_income,past_in, past_out)
    mid_age = 16.5 + 5*j

    coeffs = Dict(
        2 => (4.458352447  ,0.296304317  ,0.041096308 ,-0.016796395 , 0.000212766 , 0.021941698, -0.549043217, -0.567370585 , 0.189840010 ),
        1 => ( 3.3359853539  ,0.2159936754 , 0.0738068535 , 0.0658165434 ,-0.0005207235, -0.0548524764, -0.1937368247, -0.1433549862,  0.1710646249)
    )

    b0, b1, b2, b3, b4, b5, b6, b7, b8 = coeffs[r]
    val = b0 + b1 *y + b2 * a_income + b3 * mid_age + b4 *mid_age^2 + b5 * n + b6 * m + b7 * past_in + b8 * past_out
    return exp(val)
end

# probability of transfer in
function shocks_in_prob(r,n,m,j,y, a_income, past_in, past_out)
    # expects log income
    mid_age = 16.5 + 2*j

    coeffs = Dict(
        2 => (1.1365480649 ,-0.0611814957 ,-0.0061535913,-0.0769059009 , 0.0007188005, -0.0517937411, -0.2045665644,  0.9786317227 ,-0.1399787604),
        1 =>  (1.0597790351 ,-0.1317963643 ,-0.0002643234 ,-0.0513509386 , 0.0003317248  ,0.0013521049 ,-0.0917699762 , 1.0847798587 ,-0.0316572683)
    )

    b0, b1, b2, b3, b4, b5, b6, b7, b8 = coeffs[r]
    val = b0 + b1 *y + b2 * a_income + b3 * mid_age + b4 *mid_age^2 + b5 * n + b6 * m + b7 * past_in + b8 * past_out

    return cdf(Normal(), val)
end

# probability of transfer out
function shocks_out_prob(r,n,m, j, y, a_income, past_in, past_out)
    # expects log income
    mid_age = 16.5 + 2*j

    coeffs = Dict(
        2 => ( -2.0895073062 , 0.1373498915,  0.0430440255 ,-0.0450278807,  0.0002929933 ,-0.0512558482,  0.0781991239 , 0.0389793892,  0.9701926111),
        1 => ( -3.8610476502 , 0.0985105747 , 0.0185456108,  0.0387884732, -0.0004686962 ,-0.1009731610 , 0.2325522822 , 0.0554539223 , 1.0283776853 )
    )

    b0, b1, b2, b3, b4, b5, b6, b7, b8 = coeffs[r]
    val = b0 + b1 *y + b2 * a_income + b3 * mid_age + b4 *mid_age^2 + b5 * n + b6 * m + b7 * past_in + b8 * past_out

    return cdf(Normal(), val)
end

# transfer indicator update
function t_update(past_in, past_out, shock_in, shock_out)
    # update past transfer indicator based on current shocks
    if past_in == 1 || shock_in == 1
        next_in = 1
    else 
        next_in = 0
    end
    if past_out == 1 || shock_out == 1
            next_out = 1
    else
            next_out = 0
    end
    return next_in, next_out
end

######################################################################
# Survival Probabilities
######################################################################
# https://wonder.cdc.gov/controller/datarequest/D158;jsessionid=5A4C2F5F0AA2EE82A75AAD160CD6
survival_data = CSV.File("/Users/scanilang/Documents/econ/umn/year 4/familytransfers/data/death_rates_race_age.csv") |> DataFrame
select!(survival_data, Not(1))

######################################################################
# Family Distribution
######################################################################


fam_distrib = CSV.File("/Users/scanilang/Documents/econ/umn/year 4/familytransfers/data/fam_structure.csv") |> DataFrame
select!(fam_distrib, Not(1))
