######################################################################
# Expected Value
######################################################################
# PERIOD 1-4 SINGLE NO KIDS
function EV1(v1,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out)
    m = 0
    n = 1
    past_in, past_out = t_update(past_in, past_out, tau_in, tau_out)
    v_itp = LinearInterpolation((j_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v1, extrapolation_bc=Line())

    ap1_income = rate*ap1

    if (j == 1 && e == 4)
        # still in school next period
        yp1_plus_govt = gov_t(j+1,0,ap1, m, n)
        shock_in = shocks_in_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)
        shock_out = shocks_out_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)

        # z doesnt matter here 
        val1 = v_itp(j+1, z_grid[i_z], e, ap1, past_in, past_out, 0, 1)  # shock_in = 0, shock_out = 1
        val2 = v_itp(j+1, z_grid[i_z], e, ap1, past_in, past_out, 1, 1)  # shock_in = 1, shock_out = 1
        val3 = v_itp(j+1, z_grid[i_z], e, ap1, past_in, past_out, 1, 0)  # shock_in = 1, shock_out = 0
        val4 = v_itp(j+1, z_grid[i_z], e, ap1, past_in, past_out, 0, 0)  # shock_in = 0, shock_out = 0

        EV_new = (
                val1 * (1 - shock_in) * shock_out + 
                val2 * shock_in * shock_out + 
                val3 * shock_in * (1 - shock_out) + 
                val4 * (1 - shock_in) * (1 - shock_out)
            )
    else
        EV_new = 0
        # working next period
        for (i_zp1, zp1) in enumerate(z_grid)
            # next period income and shocks
            yp1 = g(r,j,e,n) + exp(zp1)
            yp1_plus_govt = yp1 + gov_t(j+1,yp1,ap1, m, n)
            shock_in = shocks_in_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)
            shock_out = shocks_out_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)

            val1 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 0, 1)  # shock_in = 0, shock_out = 1
            val2 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 1, 1)  # shock_in = 1, shock_out = 1
            val3 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 1, 0)  # shock_in = 1, shock_out = 0
            val4 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 0, 0)  # shock_in = 0, shock_out = 0

            EV_new += Pimat[i_z, i_zp1] * (
                val1 * (1 - shock_in) * shock_out + 
                val2 * shock_in * shock_out + 
                val3 * shock_in * (1 - shock_out) + 
                val4 * (1 - shock_in) * (1 - shock_out)
            )
        end
    end
    return EV_new
end

# PERIOD 4 SINGLE NO KIDS EXPECTING SHOCK IN PERIOD 5
function EV5(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out)

    v_itp = LinearInterpolation((j_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v2, extrapolation_bc=Line())
    
    EV5_val  = (EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 0, 1) * fam_distrib[1, r+3] + # single
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 0, 2) * fam_distrib[2, r+3]+ 
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 0, 3) * fam_distrib[3, r+3]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 0, 4) * fam_distrib[4, r+3]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 0, 5) * fam_distrib[5, r+3]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 1, 2) * fam_distrib[1, r+1]+ # married
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 1, 3) * fam_distrib[2, r+1]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 1, 4) * fam_distrib[3, r+1]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 1, 5) * fam_distrib[4, r+1]+
                EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, 1, 6) * fam_distrib[5, r+1])
    return EV5_val
end

# PERIOD 5-20 FAMILY WORKiNG
function EV2(v,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, m , n)
    past_in, past_out = t_update(past_in, past_out, tau_in, tau_out)
    v_itp = LinearInterpolation((j_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v, extrapolation_bc=Line())

    EV_new = 0
    # stupid version first
    for (i_zp1, zp1) in enumerate(z_grid)
        # next period income and shocks
        yp1 = g(r,j,e,n) + exp(zp1)
        yp1_plus_govt = yp1 + gov_t(j+1,yp1,ap1, m, n)
        ap1_income = rate*ap1
        shock_in = shocks_in_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)
        shock_out = shocks_out_prob(r,n,m, j+1, log(yp1_plus_govt), log(ap1_income),past_in, past_out)

        val1 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 0, 1)  # shock_in = 0, shock_out = 1
        val2 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 1, 1)  # shock_in = 1, shock_out = 1
        val3 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 1, 0)  # shock_in = 1, shock_out = 0
        val4 = v_itp(j+1, zp1, e, ap1, past_in, past_out, 0, 0)  # shock_in = 0, shock_out = 0

        EV_new += Pimat[i_z, i_zp1] * (
            val1 * (1 - shock_in) * shock_out + 
            val2 * shock_in * shock_out + 
            val3 * shock_in * (1 - shock_out) + 
            val4 * (1 - shock_in) * (1 - shock_out)
        )
    end
    return EV_new
end

function EW(w,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, m)
    n = m+1
    past_in, past_out = t_update(past_in, past_out, tau_in, tau_out)
    w_itp = LinearInterpolation((jw_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), w, extrapolation_bc=Line())
    z = z_grid[i_z]
    EW_new = 0

    yp1 = 0.4 * (g(r,21,e,n) + exp(z_grid[i_z]))
    yp1_plus_govt = yp1 + gov_t(j+1,yp1,ap1, m, n)
    a_income = rate * ap1
    shock_in = shocks_in_prob(r,n,m, j+1, log(yp1_plus_govt), log(a_income), past_in, past_out)
    shock_out = shocks_out_prob(r,n,m, j+1, log(yp1_plus_govt), log(a_income), past_in, past_out)

    val1 = w_itp(j+1, z, e, ap1, past_in, past_out, 0, 1, m)  # shock_in = 0, shock_out = 1
    val2 = w_itp(j+1, z, e, ap1, past_in, past_out, 1, 1, m)  # shock_in = 1, shock_out = 1
    val3 = w_itp(j+1, z, e, ap1, past_in, past_out, 1, 0, m)  # shock_in = 1, shock_out = 0
    val4 = w_itp(j+1, z, e, ap1, past_in, past_out, 0, 0, m)  # shock_in = 0, shock_out = 0

    EW_new += (
            val1 * (1 - shock_in) * shock_out + 
            val2 * shock_in * shock_out + 
            val3 * shock_in * (1 - shock_out) + 
            val4 * (1 - shock_in) * (1 - shock_out)
        )
    return EW_new
end

######################################################################
# Bellman
######################################################################

# PERIOD 1-4 SINGLE NO KIDS
function T_v1(v1, v2, r, e)
    VF_new = similar(v1)
    PF_new = similar(v1)
    n = 1
    m = 0
    v_itp = LinearInterpolation((j1_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v, extrapolation_bc=Line())
    Tcoefs =  [ 0.0738068535 0.041096308 ; 0.0863142844   0.0183175377 ] # out,in x white, black

    Threads.@threads for j in j1_grid
        # family size depending on period
        for (i_z, z) in enumerate(z_grid), (i_e, e) in e_grid, (i_a, a) in enumerate(a_grid), past_in in t_grid, past_out in t_grid, tau_in in t_grid, tau_out in t_grid
            if (j = 1 && e > 0 ||j == 2 && e == 4)
                # budget constraint if enrolled
                tuition = d - T_e
                y = 0 
            else
                # budget constraint if working
                y =  g(r,j,e,n) + exp(z) 
            end
                
            gov_amount = gov_t(j,y,a, m, n)
            a_income = rate * a
            transfer_in  =  tau_in * T_in(r,n,m,j,log(y_plus_g), log(a_income), past_in, past_out) 
            transfer_out = tau_out * T_out(r,n,m,j,log(y), log(a_income), past_in, past_out)
            monotonicity_requirement = a/Tcoefs[1,r] * (1 + r(1-tau_a) + transfer_in* Tcoefs[2,r] )
            if gov_amount > 0
                Y =  (1 + rate*(1-tau_a))a + y + gov_amount - tau_y(y + gov_amount, m) + transfer_in
            else
                Y =  (1 + rate*(1-tau_a))a + y - tau_y(y, m) + transfer_in - min(transfer_out, monotonicity_requirement)
            end
            Y = max(0,Y)

            if j <=3
                    # no kids
                obj_w(ap1) = -(u(Y-ap1,1) + beta * EV1(v,j,i_z,e,ap1, past_in, past_out, tau_in, tau_out))
                result = optimize(obj_w, 0, Y, Brent())
            else
                    # period before kids
                obj_r1(ap1) = -(u(Y-ap1,s) + beta * EV5(w,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out))
                result = optimize(obj_r1, 0, Y, Brent())
             end

            VF_new[j, i_z, i_e, i_a, past_in + 1, past_out + 1, tau_in+ 1, tau_out+ 1] = -Optim.minimum(result)
            PF_new[j, i_z, i_e, i_a, past_in+ 1, past_out + 1, tau_in+ 1, tau_out+ 1] = Optim.minimizer(result)
        end
    end

    return VF_new, PF_new
end


function T_v2(v2, w, r)
    VF_new = similar(v2)
    PF_new = similar(v2)

    v_itp = LinearInterpolation((j2_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid, m_grid, n_grid), v, extrapolation_bc=Line())
    Tcoefs =  [ 0.0738068535 0.041096308 ; 0.0863142844   0.0183175377 ] # out,in x white, black

    Threads.@threads for j in j2_grid        
        for (i_z, z) in enumerate(z_grid), (i_e, e) in e_grid, (i_a, a) in enumerate(a_grid), past_in in t_grid, past_out in t_grid, tau_in in t_grid, tau_out in t_grid, m in m_grid, n in n_grid
            # family size depending on period
            n_input = (j >= 5 && j <= 13) ? n : m+1
            s =  oecd(m,n_input)

            # total resources
            y =  g(r,j,e,n_input) + exp(z) 
            gov_amount = gov_t(j,y,a, m, n_input)
            a_income = rate * a
            transfer_in  =  tau_in * T_in(r,n_input,m,j,log(y_plus_g), log(a_income), past_in, past_out) 
            transfer_out = tau_out * T_out(r,n_input,m,j,log(y), log(a_income), past_in, past_out)
            monotonicity_requirement = a/Tcoefs[1,r] * (1 + r(1-tau_a) + transfer_in* Tcoefs[2,r] )
            if gov_amount > 0
                Y =  (1 + rate*(1-tau_a))a + y + gov_amount - tau_y(y + gov_amount, m) + transfer_in
            else
                Y =  (1 + rate*(1-tau_a))a + y - tau_y(y, m) + transfer_in - min(transfer_out, monotonicity_requirement)
            end
            Y = max(0,Y)

            if j <=20
                # working period
                obj_w(ap1) = -(u(Y-ap1,s) + beta * EV2(v2,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out,m,n))
                result = optimize(obj_w, 0, Y, Brent())
            else
                # period before retirement
                obj_r1(ap1) = -(u(Y-ap1,s) + beta * EW(w,j,i_z,e, ap1, past_in, past_out, tau_in, tau_out, m))
                result = optimize(obj_r1, 0, Y, Brent())
            end

            VF_new[j-4, i_z, i_e, i_a, past_in + 1, past_out + 1, tau_in+ 1, tau_out+ 1, m + 1, n ] = -Optim.minimum(result)
            PF_new[j-4, i_z, i_e, i_a, past_in+ 1, past_out + 1, tau_in+ 1, tau_out+ 1, m + 1, n ] = Optim.minimizer(result)
        end
    end

    return VF_new, PF_new
end

function T_w(w, r)
    WF_new = similar(w)
    WPF_new = similar(w)
    w_itp = LinearInterpolation((jw_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v, extrapolation_bc=Line())
    Threads.@threads for j in jw_grid
        for (i_z, z) in enumerate(z_grid), (i_e, e) in e_grid, (i_a, a) in enumerate(a_grid), past_in in t_grid, past_out in t_grid, tau_in in t_grid, tau_out in t_grid, m in m_grid,
            n = m+1
            s = oecd(m,m+1)

            # total resources 
            y =  0.4 * g(r,21,e,n) + exp(z) 
            gov_amount = gov_t(j,y,a, m, n)
            a_income = rate*a
            Tcoefs =  [ 0.0738068535 0.041096308 ; 0.0863142844   0.0183175377 ] # out,in x white, black
            transfer_in  =  tau_in * T_in(r,n,m,j,log(y_plus_g), log(a_income), past_in, past_out) 
            transfer_out = tau_out * T_out(r,n,m,j,log(y), log(a_income), past_in, past_out)
            monotonicity_requirement = a/Tcoefs[1,r] * (1 + r(1-tau_a) + transfer_in* Tcoefs[2,r] )
            if gov_amount > 0
                Y =  (1 + rate*(1-tau_a))a + y + gov_amount- tau_y(y + gov_amount, m) +transfer_in 
            else
                Y =  (1 + rate*(1-tau_a))a + y - tau_y(y, m) + transfer_in - min(transfer_out, monotonicity_requirement)           
            end
            Y = max(0,Y)
            if j <32
            # retirement
                obj_r2(ap1) = -(u(Y-ap1,s) + beta * survival_data[j-21,r]* EW(w,j,i_z,ap1, past_in, past_out, tau_in, tau_out, m))
                result = optimize(obj_r2, 0, Y, Brent())

                WF_new[j-22, i_z, i_e, i_a, past_in + 1, past_out + 1, tau_i + 1, tau_out + 1, m+ 1] = -Optim.minimum(result)
                WPF_new[j-22, i_z, i_e, i_a, past_in + 1, past_out + 1, tau_in + 1, tau_out + 1, m+1] = Optim.minimizer(result)
            else
                # last period of life
                WF_new[j-22, i_z, i_e, i_a, past_in + 1, past_out + 1, tau_in + 1, tau_out + 1, m+1] = u(Y,s)
                WPF_new[j-22, i_z, i_e, i_a, past_in + 1, past_out+ 1, tau_in + 1, tau_out+1 , m+1] = 0
            end
        end
    end
    return WF_new, WPF_new
end


######################################################################
# OLD
######################################################################







# Bellman operator
jya_grid = collect(1:4)
function T_v1(v1, v2, r, e)
    VF_new = similar(v)
    PF_new = similar(v)
    n = 1
    m = 0
    v_itp = LinearInterpolation((j_grid, z_grid, a_grid,t_grid, t_grid, t_grid, t_grid), v, extrapolation_bc=Line())
    Tcoefs =  [ 0.0738068535 0.041096308 ; 0.0863142844   0.0183175377 ] # out,in x white, black

    Threads.@threads for j in j_grid
        # family size depending on period
        for (i_z, z) in enumerate(z_grid), (i_a, a) in enumerate(a_grid), past_in in t_grid, past_out in t_grid, tau_in in t_grid, tau_out in t_grid
            if (j = 1 && e > 0 ||j == 2 && e == 4)
                # budget constraint if enrolled
                tuition = d - T_e
                y = 0 
            else
                # budget constraint if working
                y =  g(r,j,e,n) + exp(z) 
            end
                
                # total resources 
                y =  g(r,j,e,n) + exp(z) 
                gov_amount = gov_t(j,y,a, m, n)
                a_income = rate * a
            
                transfer_in  =  tau_in * T_in(r,n,m,j,log(y_plus_g), log(a_income), past_in, past_out) 
                transfer_out = tau_out * T_out(r,n,m,j,log(y), log(a_income), past_in, past_out)
                monotonicity_requirement = a/Tcoefs[1,r] * (1 + r(1-tau_a) + transfer_in* Tcoefs[2,r] )
                if gov_amount > 0
                    Y =  (1 + rate*(1-tau_a))a + y + gov_amount - tau_y(y + gov_amount, m) + transfer_in
            else
                Y =  (1 + rate*(1-tau_a))a + y - tau_y(y, m) + transfer_in - min(transfer_out, monotonicity_requirement)
            end
            Y = max(0,Y)

            if j <=20
                # working period
                obj_w(ap1) = -(u(Y-ap1,s) + beta * EV(v,j,i_z,ap1, past_in, past_out, tau_in, tau_out))
                result = optimize(obj_w, 0, Y, Brent())
            else
                # period before retirement
                obj_r1(ap1) = -(u(Y-ap1,s) + beta * EW(w,j,i_z,ap1, past_in, past_out, tau_in, tau_out))
                result = optimize(obj_r1, 0, Y, Brent())
            end

            VF_new[j, i_z, i_a, past_in + 1, past_out + 1, tau_in+ 1, tau_out+ 1] = -Optim.minimum(result)
            PF_new[j, i_z, i_a, past_in+ 1, past_out + 1, tau_in+ 1, tau_out+ 1] = Optim.minimizer(result)
        end
    end

    return VF_new, PF_new
end